# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15g_OX0UuXDz4JDoqo0a5CWpI8ghwexco
"""

!pip install aiogram
!pip install python-telegram-bot
!pip install nest_asyncio

!pip install telebot

!pip install transformers torch
!pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu117

!pip install aiogram

!pip install --upgrade aiogram

!pip install nest_asyncio

!pip install -U aiogram

from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio

from neural_network import analyze_image
from database import create_table, add_pet_to_db, get_found_pets, like_found_pet

TOKEN = '—Ö—Ö—Ö—Ö'
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

create_table()

@router.message(Command("start"))
async def start_command(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(text="–Ø –ø–æ—Ç–µ—Ä—è–ª –ø–∏—Ç–æ–º—Ü–∞", callback_data="lost_pet"),
        InlineKeyboardButton(text="–Ø –Ω–∞—à–µ–ª –ø–∏—Ç–æ–º—Ü–∞", callback_data="found_pet"),
        InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤", callback_data="view_found_pets"),
        InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤", callback_data="view_lost_pets"),
        InlineKeyboardButton(text="–ü–æ–¥–æ–±—Ä–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ –ø—Ä–∏—é—Ç–∞", callback_data="shelter_pet"),
    ]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@router.callback_query(lambda cb: cb.data == "lost_pet")
async def lost_pet(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã.")

@router.callback_query(lambda cb: cb.data == "found_pet")
async def found_pet(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã.")

@router.callback_query(lambda cb: cb.data == "view_found_pets")
async def view_found_pets(callback: types.CallbackQuery):
    await callback.answer()
    pets = get_found_pets()
    if not pets:
        await callback.message.answer("–ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤.")
        return

    for pet in pets:
        photo_path = pet[2]
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üëç", callback_data=f"like_{pet[0]}")
        )
        await callback.message.answer_photo(photo=photo_path, reply_markup=keyboard)

@router.callback_query(lambda cb: cb.data.startswith("like_"))
async def like_pet(callback: types.CallbackQuery):
    pet_id = int(callback.data.split("_")[1])
    like_found_pet(pet_id) –∞
    await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –ª–∞–π–∫! –ö–æ–Ω—Ç–∞–∫—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º.")

@router.callback_query(lambda cb: cb.data == "view_lost_pets")
async def view_lost_pets(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤.")

@router.callback_query(lambda cb: cb.data == "shelter_pet")
async def shelter_pet(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ –∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã.")

@router.message(lambda message: message.photo)
async def handle_photo(message: types.Message):
    photo = message.photo[-1]
    photo_path = f"photos/{photo.file_id}.jpg"
    await photo.download(photo_path)

    breed = analyze_image(photo_path)
    add_pet_to_db(message.from_user.id, photo_path, breed)
    await message.reply(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –ø–æ—Ä–æ–¥–∞: {breed}. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–æ–º—Ü–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())